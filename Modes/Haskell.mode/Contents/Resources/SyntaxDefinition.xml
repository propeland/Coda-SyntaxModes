<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE syntax SYSTEM "syntax.dtd">
<syntax>

    <head>
        <name>Haskell</name> <!-- The definitions title -->
        <charsintokens><![CDATA[_0987654321abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ@:-><|\\]]></charsintokens> <!-- Valid Characters for Variables -->
        <!-- <charsdelimitingtokens></charsdelimitingtokens> -->
    </head>

    <states>
    
        <default id="Base" color="#000" background-color="#fff" font-weight="normal" font-style="normal">
            <keywords id="Keywords" color="#881350" useforautocomplete="yes">
				<string>do</string>
				<string>if</string>
				<string>then</string>
				<string>else</string>
				<string>case</string>
				<string>otherwise</string>
				<string>import</string>
				<string>module</string>
				<string>where</string>
            </keywords>
            <keywords id="PreludeDefinitions" color="#A600A0" useforautocomplete="yes">
                <string>Integer</string>
				<string>Ord</string>
				<string>Eq</string>
				<string>Read</string>
				<string>Num</string>
				<string>Real</string>
				<string>Fractional</string>
                <string>RealFrac</string>
                <string>Floating</string>
                <string>RealFloat</string>
				<string>Show</string>
				<string>Bounded</string>
				<string>Enum</string>
				<string>Monad</string>
				<string>Just</string>
				<string>Nothing</string>
				<string>Maybe</string>
                <string>String</string>
				<string>deriving</string>
				<string>Bool</string>
				<string>Char</string>
				<string>Double</string>
				<string>Either</string>
				<string>FilePath</string>
				<string>Float</string>
				<string>Int</string>
				<string>Integer</string>
				<string>IO</string>
				<string>IOError</string>
				<string>Ordering</string>
				<string>ReadS</string>
				<string>ShowS</string>
				<string>String</string>
				<string>True</string>
				<string>False</string>
				<string>GT</string>
				<string>Left</string>
				<string>LT</string>
				<string>Right</string>
            </keywords>
            <keywords id="PreludeFunctions" color="#970800" useforautocomplete="yes">
               <string>abs</string>
                <string>acos</string>
                <string>acosh</string>
                <string>all</string>
                <string>and</string>
                <string>any</string>
                <string>appendFile</string>
                <string>applyM</string>
                <string>asTypeOf</string>
                <string>asin</string>
                <string>asinh</string>
                <string>atan2</string>
                <string>atan</string>
                <string>atanh</string>
                <string>break</string>
                <string>catch</string>
                <string>ceiling</string>
                <string>compare</string>
                <string>concat</string>
                <string>concatMap</string>
                <string>const</string>
                <string>cos</string>
                <string>cosh</string>
                <string>ctions</string>
                <string>curry</string>
                <string>cycle</string>
                <string>decodeFloat</string>
                <string>div</string>
                <string>divMod</string>
                <string>drop</string>
                <string>dropWhile</string>
                <string>elem</string>
                <string>encodeFloat</string>
                <string>enumFrom</string>
                <string>enumFromThen</string>
                <string>enumFromThenTo</string>
                <string>enumFromTo</string>
                <string>error</string>
                <string>even</string>
                <string>exp</string>
                <string>exponent</string>
                <string>fail</string>
                <string>filter</string>
                <string>flip</string>
                <string>floatDigits</string>
                <string>floatRadix</string>
                <string>floatRange</string>
                <string>floor</string>
                <string>fmap</string>
                <string>foldl1</string>
                <string>foldl</string>
                <string>foldr1</string>
                <string>foldr</string>
                <string>fromEnum</string>
                <string>fromInteger</string>
                <string>fromIntegral</string>
                <string>fromRational</string>
                <string>fst</string>
                <string>gcd</string>
                <string>getChar</string>
                <string>getContents</string>
                <string>getLine</string>
                <string>head</string>
                <string>id</string>
                <string>init</string>
                <string>interact</string>
                <string>ioError</string>
                <string>isDenormalized</string>
                <string>isIEEE</string>
                <string>isInfinite</string>
                <string>isNaN</string>
                <string>isNegativeZero</string>
                <string>iterate</string>
                <string>last</string>
                <string>lcm</string>
                <string>length</string>
                <string>lex</string>
                <string>lines</string>
                <string>log</string>
                <string>logBase</string>
                <string>lookup</string>
                <string>map</string>
                <string>mapM</string>
                <string>mapM_</string>
                <string>max</string>
                <string>maxBound</string>
                <string>maximum</string>
                <string>maybe</string>
                <string>min</string>
                <string>minBound</string>
                <string>minimum</string>
                <string>mod</string>
                <string>negate</string>
                <string>not</string>
                <string>notElem</string>
                <string>null</string>
                <string>odd</string>
                <string>or</string>
                <string>otherwise</string>
                <string>pi</string>
                <string>pred</string>
                <string>print</string>
                <string>product</string>
                <string>properFraction</string>
                <string>putChar</string>
                <string>putStr</string>
                <string>putStrLn</string>
                <string>quot</string>
                <string>quotRem</string>
                <string>read</string>
                <string>readFile</string>
                <string>readIO</string>
                <string>readList</string>
                <string>readLn</string>
                <string>readParen</string>
                <string>reads</string>
                <string>readsPrec</string>
                <string>realToFrac</string>
                <string>recip</string>
                <string>rem</string>
                <string>repeat</string>
                <string>replicate</string>
                <string>return</string>
                <string>reverse</string>
                <string>round</string>
                <string>scaleFloat</string>
                <string>scanl1</string>
                <string>scanl</string>
                <string>scanr1</string>
                <string>scanr</string>
                <string>seq</string>
                <string>sequence</string>
                <string>sequence_</string>
                <string>show</string>
                <string>showChar</string>
                <string>showList</string>
                <string>showParen</string>
                <string>showString</string>
                <string>shows</string>
                <string>showsPrec</string>
                <string>significand</string>
                <string>signum</string>
                <string>sin</string>
                <string>sinh</string>
                <string>snd</string>
                <string>span</string>
                <string>splitAt</string>
                <string>sqrt</string>
                <string>subtract</string>
                <string>succ</string>
                <string>sum</string>
                <string>tail</string>
                <string>take</string>
                <string>takeWhile</string>
                <string>tan</string>
                <string>tanh</string>
                <string>toEnum</string>
                <string>toInteger</string>
                <string>toRational</string>
                <string>truncate</string>
                <string>uncurry</string>
                <string>undefined</string>
                <string>unlines</string>
                <string>until</string>
                <string>unwords</string>
                <string>unzip3</string>
                <string>unzip</string>
                <string>userError</string>
                <string>words</string>
                <string>writeFile</string>
                <string>zip3</string>
                <string>zip</string>
                <string>zipWith3</string>
                <string>zipWith</string>
            </keywords>
            <keywords id="LangSyntax" color="#000088" useforautocomplete="yes">
				<string>|</string>
				<string>_</string>
				<string>-&gt;</string>
				<string>&lt;-</string>
				<string>::</string>
            </keywords>
            <keywords id="Numbers" color="#0000ff" useforautocomplete="no">
				<regex>(?&lt;=[^\w\d]|^)(((([0-9]+\.[0-9]*)|(\.[0-9]+))([eE][+\-]?[0-9]+)?[fFlL]?)|((([1-9][0-9]*)|0[0-7]*|(0[xX][0-9a-fA-F]+))(([uU][lL]?)|([lL][uU]?))?))(?=[^\w\d]|$)</regex>
            </keywords>
            <keywords id="Characters" color="#0000ff" useforautocomplete="no">
				<regex>(('.')|('\\.'))</regex>
            </keywords>
        </default>

        <state id="Comment" color="#236E25" background-color="none" font-weight="normal" font-style="italic">
            <begin><regex>{-</regex></begin>
            <end><regex>-}</regex></end>
        </state>
        
        <state id="SingleComment" color="#236E25" background-color="none" font-weight="normal" font-style="italic">
            <begin><regex>--</regex></begin>
            <end><regex>[\n\r]</regex></end>
        </state>
        
        <state id="String" color="#760f15" background-color="none" font-weight="normal" font-style="normal">
            <begin><regex>"</regex></begin>
            <end><regex>(((?&lt;!\\)(\\\\)*)|^)"</regex></end>
        </state>
    </states>

</syntax>
